# -*- coding: utf-8 -*-
"""waleedtask.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KScIVFcjb58vGL0cImcJW6fOJIZvpNei

GENDER PREDICTION THROUGH DATASET USING CNN MODEL

29th July 2024
"""

import numpy as np
import pandas as pd
import os

path = '/content/sample_data/UTKFace'
files = os.listdir(path)
size = len(files)
print("Total samples:",size)
print(files[0])

from google.colab import drive
drive.mount('/content/drive')

import cv2
images = []
genders = []
for file in files:
    image = cv2.imread(os.path.join(path, file),0) # use os.path.join to create file path
    if image is not None: # check that image was loaded
        image = cv2.resize(image,dsize=(64,64))
        image = image.reshape((image.shape[0],image.shape[1],1))
        images.append(image)
        split_var = file.split('_')
        genders.append(int(split_var[1]) )

import matplotlib.pyplot as plt

def display(img):
    plt.imshow(img[:,:,0])
    plt.set_cmap('gray')
    plt.show()
idx = 100 # changed index to 100 which is a valid index for the images list
sample = images[idx]
print("Gender:",genders[idx])
display(sample)

# pre processing
target = np.zeros((len(images),2),dtype='float32') # set size to length of images array
features = np.zeros((len(images),sample.shape[0],sample.shape[1],1),dtype = 'float32') # set size to length of images array
for i in range(len(images)): # iterate over the range of the length of images array
    target[i,1] = int(genders[i])
    features[i] = images[i]
features = features / 255
display(features[0])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2,shuffle  = True)
print("Samples in Training:",X_train.shape[0])
print("Samples in Testing:",X_test.shape[0])

print("Shape of image:",sample.shape)

import keras
from keras.layers import *
from keras.models import *
from keras import backend as K

inputs = Input(shape=(64,64,1))
conv1 = Conv2D(32, kernel_size=(3, 3),activation='relu')(inputs)
conv2 = Conv2D(64, kernel_size=(3, 3),activation='relu')(conv1)
pool1 = MaxPooling2D(pool_size=(2, 2))(conv2)
conv3 = Conv2D(128, kernel_size=(3, 3),activation='relu')(pool1)
pool2 = MaxPooling2D(pool_size=(2, 2))(conv3)
x = Dropout(0.25)(pool2)
flat = Flatten()(x)

dropout = Dropout(0.5)
gender_model = Dense(128, activation='relu')(flat)
gender_model = dropout(gender_model)
gender_model = Dense(64, activation='relu')(gender_model)
gender_model = dropout(gender_model)
gender_model = Dense(32, activation='relu')(gender_model)
gender_model = dropout(gender_model)
gender_model = Dense(16, activation='relu')(gender_model)
gender_model = dropout(gender_model)
gender_model = Dense(8, activation='relu')(gender_model)
gender_model = dropout(gender_model)
gender_model = Dense(2, activation='softmax')(gender_model)

model = Model(inputs=inputs, outputs=[gender_model])
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy',metrics=['accuracy'])

model.summary()

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.optimizers import Adam

# Build the CNN model
model = Sequential()

#Updated input shape to (64, 64, 1)
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

# Compile the model
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {accuracy:.2f}')

# Train the model
h = model.fit(X_train, y_train, epochs=25, batch_size=32, validation_data=(X_test, y_test))

model.save('/content/sample_data/WALEED.h5')

history = h
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

def display(img):
    plt.imshow(img[:,:,0])
    plt.set_cmap('gray')
    plt.show()

def get_gender(prob):
    if prob < 0.5:return "Male"
    else: return "Female"

def get_result(sample):
    sample = sample/255
    val = model.predict( np.array([ sample ]) )
    gender = get_gender(val[0][1])
    print("Values:",val,"\nPredicted Gender:",gender)


indexes = [500,59,80,2,4546,7,9,256,45]
for idx in indexes:
    if idx < len(images):
        sample = images[idx]
        display(sample)
        print("Actual Gender:",get_gender(genders[idx]))
        res = get_result(sample)
    else:
        print(f"Index {idx} is out of bounds for 'images'")